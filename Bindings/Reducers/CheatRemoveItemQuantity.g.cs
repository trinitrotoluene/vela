// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void CheatRemoveItemQuantityHandler(ReducerEventContext ctx, ulong inventoryEntityId, int pocketIndex, int quantityToRemove);
        public event CheatRemoveItemQuantityHandler? OnCheatRemoveItemQuantity;

        public void CheatRemoveItemQuantity(ulong inventoryEntityId, int pocketIndex, int quantityToRemove)
        {
            conn.InternalCallReducer(new Reducer.CheatRemoveItemQuantity(inventoryEntityId, pocketIndex, quantityToRemove), this.SetCallReducerFlags.CheatRemoveItemQuantityFlags);
        }

        public bool InvokeCheatRemoveItemQuantity(ReducerEventContext ctx, Reducer.CheatRemoveItemQuantity args)
        {
            if (OnCheatRemoveItemQuantity == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnCheatRemoveItemQuantity(
                ctx,
                args.InventoryEntityId,
                args.PocketIndex,
                args.QuantityToRemove
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class CheatRemoveItemQuantity : Reducer, IReducerArgs
        {
            [DataMember(Name = "inventory_entity_id")]
            public ulong InventoryEntityId;
            [DataMember(Name = "pocket_index")]
            public int PocketIndex;
            [DataMember(Name = "quantity_to_remove")]
            public int QuantityToRemove;

            public CheatRemoveItemQuantity(
                ulong InventoryEntityId,
                int PocketIndex,
                int QuantityToRemove
            )
            {
                this.InventoryEntityId = InventoryEntityId;
                this.PocketIndex = PocketIndex;
                this.QuantityToRemove = QuantityToRemove;
            }

            public CheatRemoveItemQuantity()
            {
            }

            string IReducerArgs.ReducerName => "cheat_remove_item_quantity";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags CheatRemoveItemQuantityFlags;
        public void CheatRemoveItemQuantity(CallReducerFlags flags) => CheatRemoveItemQuantityFlags = flags;
    }
}

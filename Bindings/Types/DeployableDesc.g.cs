// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    [SpacetimeDB.Type]
    [DataContract]
    public sealed partial class DeployableDesc
    {
        [DataMember(Name = "id")]
        public int Id;
        [DataMember(Name = "name")]
        public string Name;
        [DataMember(Name = "deploy_from_collectible_id")]
        public int DeployFromCollectibleId;
        [DataMember(Name = "deploy_time")]
        public float DeployTime;
        [DataMember(Name = "deployable_type")]
        public DeployableType DeployableType;
        [DataMember(Name = "pathfinding_id")]
        public int PathfindingId;
        [DataMember(Name = "movement_type")]
        public MovementType MovementType;
        [DataMember(Name = "can_enter_portals")]
        public bool CanEnterPortals;
        [DataMember(Name = "speed")]
        public System.Collections.Generic.List<MovementSpeed> Speed;
        [DataMember(Name = "use_player_speed_modifier")]
        public bool UsePlayerSpeedModifier;
        [DataMember(Name = "placeable_on_land")]
        public bool PlaceableOnLand;
        [DataMember(Name = "placeable_in_water")]
        public bool PlaceableInWater;
        [DataMember(Name = "capacity")]
        public int Capacity;
        [DataMember(Name = "storage")]
        public int Storage;
        [DataMember(Name = "stockpile")]
        public int Stockpile;
        [DataMember(Name = "barter")]
        public int Barter;
        [DataMember(Name = "item_slot_size")]
        public int ItemSlotSize;
        [DataMember(Name = "cargo_slot_size")]
        public int CargoSlotSize;
        [DataMember(Name = "model_address")]
        public string ModelAddress;
        [DataMember(Name = "stats")]
        public System.Collections.Generic.List<CsvStatEntry> Stats;
        [DataMember(Name = "player_animations_in_deployable_slots")]
        public System.Collections.Generic.List<int> PlayerAnimationsInDeployableSlots;
        [DataMember(Name = "allow_driver_extract")]
        public bool AllowDriverExtract;
        [DataMember(Name = "allow_passenger_extract")]
        public bool AllowPassengerExtract;
        [DataMember(Name = "show_for_secs_after_owner_logout")]
        public int ShowForSecsAfterOwnerLogout;
        [DataMember(Name = "allow_emote_while_driver")]
        public bool AllowEmoteWhileDriver;
        [DataMember(Name = "allow_emote_while_passenger")]
        public bool AllowEmoteWhilePassenger;
        [DataMember(Name = "experience_per_progress")]
        public System.Collections.Generic.List<ExperienceStackF32> ExperiencePerProgress;
        [DataMember(Name = "mounting_radius")]
        public float MountingRadius;

        public DeployableDesc(
            int Id,
            string Name,
            int DeployFromCollectibleId,
            float DeployTime,
            DeployableType DeployableType,
            int PathfindingId,
            MovementType MovementType,
            bool CanEnterPortals,
            System.Collections.Generic.List<MovementSpeed> Speed,
            bool UsePlayerSpeedModifier,
            bool PlaceableOnLand,
            bool PlaceableInWater,
            int Capacity,
            int Storage,
            int Stockpile,
            int Barter,
            int ItemSlotSize,
            int CargoSlotSize,
            string ModelAddress,
            System.Collections.Generic.List<CsvStatEntry> Stats,
            System.Collections.Generic.List<int> PlayerAnimationsInDeployableSlots,
            bool AllowDriverExtract,
            bool AllowPassengerExtract,
            int ShowForSecsAfterOwnerLogout,
            bool AllowEmoteWhileDriver,
            bool AllowEmoteWhilePassenger,
            System.Collections.Generic.List<ExperienceStackF32> ExperiencePerProgress,
            float MountingRadius
        )
        {
            this.Id = Id;
            this.Name = Name;
            this.DeployFromCollectibleId = DeployFromCollectibleId;
            this.DeployTime = DeployTime;
            this.DeployableType = DeployableType;
            this.PathfindingId = PathfindingId;
            this.MovementType = MovementType;
            this.CanEnterPortals = CanEnterPortals;
            this.Speed = Speed;
            this.UsePlayerSpeedModifier = UsePlayerSpeedModifier;
            this.PlaceableOnLand = PlaceableOnLand;
            this.PlaceableInWater = PlaceableInWater;
            this.Capacity = Capacity;
            this.Storage = Storage;
            this.Stockpile = Stockpile;
            this.Barter = Barter;
            this.ItemSlotSize = ItemSlotSize;
            this.CargoSlotSize = CargoSlotSize;
            this.ModelAddress = ModelAddress;
            this.Stats = Stats;
            this.PlayerAnimationsInDeployableSlots = PlayerAnimationsInDeployableSlots;
            this.AllowDriverExtract = AllowDriverExtract;
            this.AllowPassengerExtract = AllowPassengerExtract;
            this.ShowForSecsAfterOwnerLogout = ShowForSecsAfterOwnerLogout;
            this.AllowEmoteWhileDriver = AllowEmoteWhileDriver;
            this.AllowEmoteWhilePassenger = AllowEmoteWhilePassenger;
            this.ExperiencePerProgress = ExperiencePerProgress;
            this.MountingRadius = MountingRadius;
        }

        public DeployableDesc()
        {
            this.Name = "";
            this.Speed = new();
            this.ModelAddress = "";
            this.Stats = new();
            this.PlayerAnimationsInDeployableSlots = new();
            this.ExperiencePerProgress = new();
        }
    }
}

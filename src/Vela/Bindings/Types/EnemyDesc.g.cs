// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    [SpacetimeDB.Type]
    [DataContract]
    public sealed partial class EnemyDesc
    {
        [DataMember(Name = "enemy_type")]
        public int EnemyType;
        [DataMember(Name = "name")]
        public string Name;
        [DataMember(Name = "pathfinding_id")]
        public int PathfindingId;
        [DataMember(Name = "targeting_matrix_id")]
        public int TargetingMatrixId;
        [DataMember(Name = "combat_actions_ids")]
        public System.Collections.Generic.List<int> CombatActionsIds;
        [DataMember(Name = "description")]
        public string Description;
        [DataMember(Name = "min_speed")]
        public int MinSpeed;
        [DataMember(Name = "max_speed")]
        public int MaxSpeed;
        [DataMember(Name = "radius")]
        public float Radius;
        [DataMember(Name = "awareness_destination_threshold")]
        public float AwarenessDestinationThreshold;
        [DataMember(Name = "min_awareness_tick_sec")]
        public float MinAwarenessTickSec;
        [DataMember(Name = "max_awareness_tick_sec")]
        public float MaxAwarenessTickSec;
        [DataMember(Name = "max_health")]
        public int MaxHealth;
        [DataMember(Name = "ignore_damage")]
        public bool IgnoreDamage;
        [DataMember(Name = "health_regen_quantity")]
        public float HealthRegenQuantity;
        [DataMember(Name = "armor")]
        public int Armor;
        [DataMember(Name = "accuracy")]
        public int Accuracy;
        [DataMember(Name = "evasion")]
        public int Evasion;
        [DataMember(Name = "strength")]
        public int Strength;
        [DataMember(Name = "min_damage")]
        public int MinDamage;
        [DataMember(Name = "max_damage")]
        public int MaxDamage;
        [DataMember(Name = "cooldown_multiplier")]
        public float CooldownMultiplier;
        [DataMember(Name = "daytime_detect_range")]
        public int DaytimeDetectRange;
        [DataMember(Name = "daytime_aggro_range")]
        public int DaytimeAggroRange;
        [DataMember(Name = "daytime_deaggro_range")]
        public int DaytimeDeaggroRange;
        [DataMember(Name = "nighttime_detect_range")]
        public int NighttimeDetectRange;
        [DataMember(Name = "nighttime_aggro_range")]
        public int NighttimeAggroRange;
        [DataMember(Name = "nighttime_deaggro_range")]
        public int NighttimeDeaggroRange;
        [DataMember(Name = "evade_range")]
        public int EvadeRange;
        [DataMember(Name = "deaggro_health_threshold")]
        public float DeaggroHealthThreshold;
        [DataMember(Name = "attack_level")]
        public int AttackLevel;
        [DataMember(Name = "defense_level")]
        public int DefenseLevel;
        [DataMember(Name = "prefab_address")]
        public string PrefabAddress;
        [DataMember(Name = "icon_address")]
        public string IconAddress;
        [DataMember(Name = "extracted_item_stacks")]
        public System.Collections.Generic.List<ProbabilisticItemStack> ExtractedItemStacks;
        [DataMember(Name = "experience_per_damage_dealt")]
        public System.Collections.Generic.List<ExperienceStackF32> ExperiencePerDamageDealt;
        [DataMember(Name = "tier")]
        public int Tier;
        [DataMember(Name = "tag")]
        public string Tag;
        [DataMember(Name = "rarity")]
        public Rarity Rarity;
        [DataMember(Name = "huntable")]
        public bool Huntable;

        public EnemyDesc(
            int EnemyType,
            string Name,
            int PathfindingId,
            int TargetingMatrixId,
            System.Collections.Generic.List<int> CombatActionsIds,
            string Description,
            int MinSpeed,
            int MaxSpeed,
            float Radius,
            float AwarenessDestinationThreshold,
            float MinAwarenessTickSec,
            float MaxAwarenessTickSec,
            int MaxHealth,
            bool IgnoreDamage,
            float HealthRegenQuantity,
            int Armor,
            int Accuracy,
            int Evasion,
            int Strength,
            int MinDamage,
            int MaxDamage,
            float CooldownMultiplier,
            int DaytimeDetectRange,
            int DaytimeAggroRange,
            int DaytimeDeaggroRange,
            int NighttimeDetectRange,
            int NighttimeAggroRange,
            int NighttimeDeaggroRange,
            int EvadeRange,
            float DeaggroHealthThreshold,
            int AttackLevel,
            int DefenseLevel,
            string PrefabAddress,
            string IconAddress,
            System.Collections.Generic.List<ProbabilisticItemStack> ExtractedItemStacks,
            System.Collections.Generic.List<ExperienceStackF32> ExperiencePerDamageDealt,
            int Tier,
            string Tag,
            Rarity Rarity,
            bool Huntable
        )
        {
            this.EnemyType = EnemyType;
            this.Name = Name;
            this.PathfindingId = PathfindingId;
            this.TargetingMatrixId = TargetingMatrixId;
            this.CombatActionsIds = CombatActionsIds;
            this.Description = Description;
            this.MinSpeed = MinSpeed;
            this.MaxSpeed = MaxSpeed;
            this.Radius = Radius;
            this.AwarenessDestinationThreshold = AwarenessDestinationThreshold;
            this.MinAwarenessTickSec = MinAwarenessTickSec;
            this.MaxAwarenessTickSec = MaxAwarenessTickSec;
            this.MaxHealth = MaxHealth;
            this.IgnoreDamage = IgnoreDamage;
            this.HealthRegenQuantity = HealthRegenQuantity;
            this.Armor = Armor;
            this.Accuracy = Accuracy;
            this.Evasion = Evasion;
            this.Strength = Strength;
            this.MinDamage = MinDamage;
            this.MaxDamage = MaxDamage;
            this.CooldownMultiplier = CooldownMultiplier;
            this.DaytimeDetectRange = DaytimeDetectRange;
            this.DaytimeAggroRange = DaytimeAggroRange;
            this.DaytimeDeaggroRange = DaytimeDeaggroRange;
            this.NighttimeDetectRange = NighttimeDetectRange;
            this.NighttimeAggroRange = NighttimeAggroRange;
            this.NighttimeDeaggroRange = NighttimeDeaggroRange;
            this.EvadeRange = EvadeRange;
            this.DeaggroHealthThreshold = DeaggroHealthThreshold;
            this.AttackLevel = AttackLevel;
            this.DefenseLevel = DefenseLevel;
            this.PrefabAddress = PrefabAddress;
            this.IconAddress = IconAddress;
            this.ExtractedItemStacks = ExtractedItemStacks;
            this.ExperiencePerDamageDealt = ExperiencePerDamageDealt;
            this.Tier = Tier;
            this.Tag = Tag;
            this.Rarity = Rarity;
            this.Huntable = Huntable;
        }

        public EnemyDesc()
        {
            this.Name = "";
            this.CombatActionsIds = new();
            this.Description = "";
            this.PrefabAddress = "";
            this.IconAddress = "";
            this.ExtractedItemStacks = new();
            this.ExperiencePerDamageDealt = new();
            this.Tag = "";
        }
    }
}

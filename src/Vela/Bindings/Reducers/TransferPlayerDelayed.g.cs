// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void TransferPlayerDelayedHandler(ReducerEventContext ctx, TransferPlayerTimer timer);
        public event TransferPlayerDelayedHandler? OnTransferPlayerDelayed;

        public void TransferPlayerDelayed(TransferPlayerTimer timer)
        {
            conn.InternalCallReducer(new Reducer.TransferPlayerDelayed(timer), this.SetCallReducerFlags.TransferPlayerDelayedFlags);
        }

        public bool InvokeTransferPlayerDelayed(ReducerEventContext ctx, Reducer.TransferPlayerDelayed args)
        {
            if (OnTransferPlayerDelayed == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnTransferPlayerDelayed(
                ctx,
                args.Timer
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class TransferPlayerDelayed : Reducer, IReducerArgs
        {
            [DataMember(Name = "timer")]
            public TransferPlayerTimer Timer;

            public TransferPlayerDelayed(TransferPlayerTimer Timer)
            {
                this.Timer = Timer;
            }

            public TransferPlayerDelayed()
            {
                this.Timer = new();
            }

            string IReducerArgs.ReducerName => "transfer_player_delayed";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags TransferPlayerDelayedFlags;
        public void TransferPlayerDelayed(CallReducerFlags flags) => TransferPlayerDelayedFlags = flags;
    }
}

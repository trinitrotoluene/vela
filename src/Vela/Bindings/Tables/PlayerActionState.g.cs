// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

#nullable enable

using System;
using SpacetimeDB.BSATN;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteTables
    {
        public sealed class PlayerActionStateHandle : RemoteTableHandle<EventContext, PlayerActionState>
        {
            protected override string RemoteTableName => "player_action_state";

            public sealed class AutoIdUniqueIndex : UniqueIndexBase<ulong>
            {
                protected override ulong GetKey(PlayerActionState row) => row.AutoId;

                public AutoIdUniqueIndex(PlayerActionStateHandle table) : base(table) { }
            }

            public readonly AutoIdUniqueIndex AutoId;

            public sealed class ChunkIndexIndex : BTreeIndexBase<ulong>
            {
                protected override ulong GetKey(PlayerActionState row) => row.ChunkIndex;

                public ChunkIndexIndex(PlayerActionStateHandle table) : base(table) { }
            }

            public readonly ChunkIndexIndex ChunkIndex;

            public sealed class EntityIdIndex : BTreeIndexBase<ulong>
            {
                protected override ulong GetKey(PlayerActionState row) => row.EntityId;

                public EntityIdIndex(PlayerActionStateHandle table) : base(table) { }
            }

            public readonly EntityIdIndex EntityId;

            internal PlayerActionStateHandle(DbConnection conn) : base(conn)
            {
                AutoId = new(this);
                ChunkIndex = new(this);
                EntityId = new(this);
            }

            protected override object GetPrimaryKey(PlayerActionState row) => row.AutoId;
        }

        public readonly PlayerActionStateHandle PlayerActionState;
    }
}
